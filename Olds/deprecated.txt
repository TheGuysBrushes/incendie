22/05
###############################	#
#			firewidget				#
# constructeur avec crea foret	#
###############################	#
.h :
// 	FireWidget(int _largeur, int _hauteur, float proba = 0.60, float coef_brulure=1.0);

.cpp :
/**
 * Constructeur de classe. Initialise les différents pointeurs
 * et fixe la taille minimale du widget
 * @param int _largeur : nombre de colonnes de la matrice 
 * @param int _hauteur : nombre de lignes de la matrice
 * @param float _proba : probabilité qu'une cellule deviennent un arbre
 * @param float _coef : coefficient de combustion de l'incendie
 * @author Ugo et Florian
 * @deprecated
 */
// FireWidget::FireWidget(int _largeur, int _hauteur, float proba, float coef_brulure): QWidget()
// {
// 	buffer = new QImage();
// 	color = new QColor(Qt::black);
// 	bufferPainter= new QPainter(); 	
// 	pictureForest= new QImage();
// 
// 	initialise(_largeur, _hauteur, proba, coef_brulure);
// // 	loadFromPicture("../foret_pay.tif");
// 	
// 	rubber = NULL;
// }


22/04
###############################	#
#			firewidget.cpp				#
#	drawForest/Variable();			#
###############################	#
/**
 * IMPROVEIT
 * J'ai essayé de créer une fonction qui dessinerai les cellules grâce à l'appel d'une autre fonction donné en paramètre,
 * 	mais "function/std::function/function::function avec #include <functional> ne marche pas
 * @deprecated
 * @author Florian
 */

/**
 * premiere fonction, il aurait fallu créer drawStatic ...
 */
// void FireWidget::drawVariable(int posWidth, int posHeight, const Cellule* cell)
// {
// 	int cell_larg = width() / this->foret.largeur();
// 	int cell_haut = height() / this->foret.hauteur();
// 	
// 	QPainter paint(this->buffer);
// 	
// 	if( cell->getEtat() == 0){
// 		this->color->setNamedColor("black");
// 		
// 	}else if(cell->getEtat() == 1){
// 		// Il faut ici vérifier l'essence de l'arbre pour lui attribuer une variante de vert
// 		unsigned indice= dynamic_cast < const Arbre* >(cell)->getEssence()->getIndice();
// 		setColor(indice);
// 	}
// 	paint.fillRect(posWidth, posHeight, cell_larg, cell_haut, *(color));	
// }


// void FireWidget::drawForest(void(*pDraw)(int, int, const Cellule*) )
// {
// 	int cell_larg = width() / this->foret.largeur();
// 	int cell_haut = height() / this->foret.hauteur();
// 	
// 	int current_largeur= 0;
// 	for(int i=0; i<this->foret.largeur(); ++i){
// 		// On ne passe pas la hauteur de la grille mais le nombre de colonne*taille de colonne pour
// 		// éviter la petite zone en bas de grille
// 		vector< Cellule* >* ligne= foret[i];
// 		
// 		int current_hauteur= 0;
// 		for( vector< Cellule* >::const_iterator j( ligne->begin() ); j!=ligne->end(); ++j){
// 			Cellule* cell= *j;
// 
// 			pDraw(cell_larg,cell_haut, cell);
// 			
// 	// Incrémentations des positions des cellules
// 			current_hauteur += cell_haut;
// 		}
// 		current_largeur += cell_larg;
//     }
// }

22/04
################################
#			firewidget.h			#
#	drawForest/Variable();		#
################################
	// 	void drawVariable(int posWidth, int posHeight, const Cellule* cell);
	// 	void drawForest(void(*pDraw)(int, int, const Cellule*) );
	// 	void drawForest(void* drawCell(int, int, const Cellule*));
	// 	void drawForest(std::function<void(void)> drawCell );
	

################################
#			foret.cpp			#
#			explode()			#
#		avec const char*		#
################################

vector< const char* >& explode(const string& str)
{
	istringstream split(str);
	vector< const char* >* tokens = new vector<const char*>;
	
	for(string each; getline(split, each, ' '); tokens->push_back(each.c_str()) );
	
	#if DEBUG_FILE
	for (vector<const char*>::const_iterator i(tokens->begin()); i!= tokens->end(); ++i){
		cout << *i<< " - ";
	}
	cout << endl;
	#endif

	return   *tokens;
}

################################
#			foret.cpp			#
#			adjacents()			#
################################
// 	if (col<colonnes-1) {
// 		Cellule* cell= matrice[row][col+1];
// 		// verification que la cellule est un arbre, qui n'est pas enflammee
// 		if (cell->getEtat()==1)
// 			liste.push_back( dynamic_cast < Arbre* >(cell) );
// 	}
// 		
// 	if (col>0) {
// 		Cellule* cell= matrice[row][col-1];
// 		// verification que la cellule est un arbre, qui n'est pas enflammee
// 		if (cell->getEtat()==1)
// 			liste.push_back( dynamic_cast < Arbre* >(cell) );
// 	}
// 	
// 	if (row<lignes-1) {
// 		Cellule* cell= matrice[row+1][col];
// 		// verification que la cellule est un arbre, qui n'est pas enflammee
// 		if (cell->getEtat()==1)
// 			liste.push_back( dynamic_cast < Arbre* >(cell) );
// 	}
// 
// 	if (row>0) {
// 		Cellule* cell= matrice[row-1][col];
// 		// verification que la cellule est un arbre, qui n'est pas enflammee
// 		if (cell->getEtat()==1)
// 			liste.push_back( dynamic_cast < Arbre* >(cell) );
// 	}

################################
#			foret.cpp			#
#			NextMove()			#
################################
après bool modif = false;
// 		for_each<Cellule>(matrice[i].begin(), matrice[i].end(), transition);

################################
#			foret.h/cpp			#
#			eteindre();			#
################################

void Foret::eteindre(int row, int col){
	dynamic_cast < Arbre* >(matrice[row][col])->blast();
}
