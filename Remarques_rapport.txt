Programme :

// un arbre hérite de cellule
// - les cellules/arbres sont stockés par pointeurs dans le vecteur de vecteurs
// - la cellule ne contient qu'un état, si c'est un arbre (dynamic_cast) il a des attributs spécifiques
// - faire une sous-classe de arbre : arbre en cendres ? ou alors sous-classe de cellule ou seulement arbre dans état brulé (3) : plus simpe

/* foret	*/
//	DID : 1	: utiliser les coordonnées des arbres dans les méthodes plutôt que de les passer en arguments
// 			+ code nettoyé (commentaires ...)
//	DID	2	: revérifier les arguments des méthodes et les algorithmes pour prendre en compte les modif
//	DID	3	: faire des accesseurs et setters plus propres et explicites, supprimer attributs protected ?
// DID	4	: Prise en compte des PV
// DID	5	: Gérer arbres adjacents diagonaux ET avec plus de 1 de distance
//			5 bis	: reduire la transmission selon la distance ?, creer classe ? (Arbre+distance)
// DID	6	: Prise en compte coefs
//	TODO	7	: EN PARTIE	; Ajout des vents

//	DID	8	: Implementation de Qt
// DID	9	: Debut d'interface de configuration (taille, vitesse ...)

//	TODO	10	: Jeux d'essais


/* (FireWidget)
 * TODO	4- utiliser des Qrgba pour définir les couleurs
 * 		 4_bis-	lecture pixel par pixel de l'image
 */



Général : 
	Création d'un systeme de logs à partir d'un fichier debug.h inclus dans tous les fichiers cpp,
permettant d'afficher les informations de suivi de l'exécution de chaque partie indépendemment, 
en activant les debugs concernés, sans ralentir l'exécution du programme en "mode release", sans debug.
	Cela facilite également la finalisation du projet, car il n'y pas de code de débuggage inutile.

 Moteur indépendant de l'affichage.
 

// Florian :
- voir si on fait une liste unique pour les éléments qui ont changé d'état ?
	-> Non, j'ai préféré faire des listes séparées pour pouvoir traiter/afficher(1 sélection de couleur avant d'afficher la liste) et debugger plus facilement, en affichant seulement l'élément qui nous interesse.
	 Une liste par état ; les listes représentent les nouveaux éléments dans cet état
	
- extraire largeur et hauteur dans (-firescreen-) firewidget plutot que dans foret => passer un fichier plutot qu'un chemin

- 3 Création de Forêt différentes : 
	1) Création aléatoire de la forêt à partir de paramètres choisis par l'utilisateur (paramètres de fwelcome)
	2) Création d'une forêt à partir d'une image d'une forêt (en cours), pour l'instant grâce aux niveaux de vert
	3) Restauration d'une forêt enregistrée précédement

	-> FireWidget est crée vide, puis il y a une initialisation par type de création de forêt voulue


Souris FireWidget (Ugo): 
-/* 1- Création de la zone de selection clics souris
- * 2- Sur le release, confirmation de la zone et application de l'effet choisi
- * 3- Pour les effets, deux boutons ( coupure et retardateur ) dont un par défaut activé
- * 4- utiliser des Qrgba pour définir les couleurs


A VOIR : 
Size Hints and Size Policies

When implementing a new widget, it is almost always useful to reimplement sizeHint() to provide a reasonable default size for the widget and to set the correct size policy with setSizePolicy().

By default, composite widgets which do not provide a size hint will be sized according to the space requirements of their child widgets.

The size policy lets you supply good default behavior for the layout management system, so that other widgets can contain and manage yours easily. The default size policy indicates that the size hint represents the preferred size of the widget, and this is often good enough for many widgets.

Note: The size of top-level widgets are constrained to 2/3 of the desktop's height and width. You can resize() the widget manually if these bounds are inadequate.